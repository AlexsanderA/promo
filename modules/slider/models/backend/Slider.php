<?php

namespace app\modules\slider\models\backend;

use Yii;
use yii\behaviors\SluggableBehavior;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "slider".
 *
 * @property integer $id
 * @property string $name
 * @property string $title
 * @property string $body
 * @property integer $status
 */
class Slider extends ActiveRecord
{

    const STATUS_ACTIVE = 1;
    const STATUS_WAIT = 0;

    public function behaviors()
    {
        return [
            [
                'class' => SluggableBehavior::className(),
                'attribute' => 'title',
                'slugAttribute' => 'name',
                'immutable' => true,
                'ensureUnique' => true,
            ],
        ];
    }
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'slider';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['title'], 'required'],
            [['body'], 'string'],
            [['status'], 'integer'],
            [['title', 'name'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Машинное имя',
            'title' => 'Название слайдера',
            'body' => 'Описание слайдера',
            'status' => 'Статус',
        ];
    }

    public function getStatusName()
    {
        return ArrayHelper::getValue(self::getStatusesArray(), $this->status);
    }

    public static function getStatusesArray()
    {
        return [
            self::STATUS_ACTIVE => 'Опубликовано',
            self::STATUS_WAIT => 'Черновик',
        ];
    }

    public function getItems()
    {
        return $this->hasMany(SliderItem::className(), ['slider_id' => 'id'])
            ->orderBy(['sort_order' => SORT_ASC])
            ->with('files');
    }

    public function afterDelete()
    {
        foreach (SliderItem::find()->where('slider_id = :id', [':id' => $this->id])->all() as $item) {
            $item->delete();
        }
        parent::afterDelete(); // TODO: Change the autogenerated stub
    }

}
